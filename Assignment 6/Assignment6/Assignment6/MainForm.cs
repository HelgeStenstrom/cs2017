// Helge Stenström 2017
// ah7875

using System;
using System.Windows.Forms;

namespace Assignment6
{
    public partial class FrmMain : Form
    {
        /// <summary>
        /// The main form has a task manager
        /// </summary>
        private readonly TaskManager _taskManager = new TaskManager();

        /// <summary>
        /// Default constructor of the class. Called by autogenerated code.
        /// </summary>
        public FrmMain()
        {
            InitializeComponent();
        }

        /// <summary>
        /// When the form is loaded, this method is run to initialize it.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form1_Load(object sender, EventArgs e)
        {
            _taskManager.Clear();
            InitializeGui();
            UpdateTable();
           
        }

        /// <summary>
        /// Initialize the GUI by loading choices in a combobox and clearing the description text.
        /// </summary>
        private void InitializeGui()
        {
            cbxPrio.DataSource = Task.GetAllPrioStrings();
            txtDescription.Clear();
        }

        /// <summary>
        /// When Add is clicked, we want to add the task in the description to the task manager.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnAdd_Click(object sender, EventArgs e)
        {
            var prio = (Priority)cbxPrio.SelectedIndex;
            _taskManager.Add(new Task(txtDescription.Text, 
                                      prio,
                                      dateTimePicker1.Value, 
                                      false));
            UpdateTable();
        }

        /// <summary>
        /// When a task is selected, and we click Change, we want to replace the 
        /// selected task by that described by the other fields of the form.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnChange_Click(object sender, EventArgs e)
        {
            //NotImplementedMessage();
            if (lstvTasks.SelectedIndices.Count == 1)
            {
                int index = lstvTasks.SelectedIndices[0];
                Task task = new Task(txtDescription.Text,
                                      (Priority)cbxPrio.SelectedIndex,
                                      dateTimePicker1.Value,
                                      false);
                _taskManager[index] = task;
                UpdateTable();
            }
        }

        /// <summary>
        /// This form is displayed when the user makes choices that are not supported yet.
        /// </summary>
        private static void NotImplementedMessage()
        {
            MessageBoxButtons okButton = MessageBoxButtons.OK;
            MessageBox.Show("Not implemented",
                "Alert!",
                okButton);
        }

        /// <summary>
        /// When a task is selected in the list, and Delete is clicked, 
        /// the corresponding task is removed from the task manager and from the list.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnDelete_Click(object sender, EventArgs e)
        {
            _taskManager.RemoveAt(lstvTasks.SelectedIndices[0]);
            UpdateTable();
        }

        /// <summary>
        /// Fill the ListVIEW with tasks from the task manager.
        /// </summary>
        private void UpdateTable()
        {
            lstvTasks.Items.Clear();
            foreach (var task in _taskManager.TasksAsStrings)
            {
                // Create a row of the data
                ListViewItem row = new ListViewItem(task);
                // and add it to the ListView
                lstvTasks.Items.Add(row);
            }
            ActivateButtons();
        }

        /// <summary>
        /// There must be some text in the description before we can add a task.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void txtDescription_TextChanged(object sender, EventArgs e)
        {
            btnAdd.Enabled = !(string.IsNullOrEmpty(txtDescription.Text));
        }

        /// <summary>
        /// When a row in the task list is selected, we check that it's exactly one row.
        /// If it is, we activate the Change and Delete buttons. 
        /// We also update the other entry fields with information from the selected task.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void lstvTasks_SelectedIndexChanged(object sender, EventArgs e)
        {
            bool activateButtons = ActivateButtons();
            if (activateButtons)
            {
                int index = lstvTasks.SelectedIndices[0];
                Task task = _taskManager[index];
                UpdateFormFromTask(task);
            }
        }

        /// <summary>
        /// Activate Change and Delete buttons, so that they can be clicked.
        /// Do so only if exactly one row is selected in the listview.
        /// </summary>
        /// <returns></returns>
        private bool ActivateButtons()
        {
            bool activateButtons = (lstvTasks.SelectedIndices.Count == 1);
            btnChange.Enabled = activateButtons;
            btnDelete.Enabled = activateButtons;
            return activateButtons;
        }

        /// <summary>
        /// Update the entry form fields with information from a task,
        /// typically the selected task in the listview.
        /// </summary>
        /// <param name="task"></param>
        private void UpdateFormFromTask(Task task)
        {
            txtDescription.Text = task.Description;
            dateTimePicker1.Value = task.Date;
            cbxPrio.SelectedIndex = (int) task.Priority;
        }

        /// <summary>
        /// About box, version 1. 
        /// It's not as fancy as the other About box.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void omToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox().ShowDialog();
            MessageBox.Show("This is a solution to Assignment 6 i MAH's C# course 2017. \n (c) 2017 Helge Stenström");
        }

        /// <summary>
        /// The user gets a chance to regret the choice to exit the program, 
        /// when File->Exit or Alt-F4 is chosen.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            MessageBoxButtons okButton = MessageBoxButtons.OKCancel;
            DialogResult result = MessageBox.Show("Sure to exit the program?",
                "Think twice!",
                okButton);

            if (result == DialogResult.OK)
            {
                Application.Exit();
            }
        }

        /// <summary>
        /// Method run when the "cross" close icon of the window banner is clicked.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            MessageBoxButtons okButton = MessageBoxButtons.OKCancel;
            DialogResult result = MessageBox.Show("Are you sure to exit the program?",
                "Think twice!",
                okButton);

            e.Cancel = result != DialogResult.OK;
        }

        /// <summary>
        /// A time calls this function every second.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer1_Tick(object sender, EventArgs e)
        {
            var now = DateTime.Now;
            //lblNow.Text = $"{now.Hour,2}:{now.Minute,2}:{now.Second,2}";
            lblNow.Text = now.ToString(@"HH\:mm\:ss");
        }

        /// <summary>
        /// Called when the user selects to open a date file. 
        /// Not implemented.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void openDatefileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NotImplementedMessage();
        }

        /// <summary>
        /// Called when the user selects to save a datefile. 
        /// Not implemented.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void saveDatefileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            NotImplementedMessage();
        }
    }
}
